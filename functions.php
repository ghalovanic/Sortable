<?php/** * Does a lookup in the listings hash table to find the correct manufacturer array, * then attempts to find a match based on $productVal and the listings array title * * @param string   $manufacturerKey The key to match on the listings hash array * @param string   $productVal The product string we want to match to listings * @param array    $lookup Hash table of listing items (keyed on manufacturer) * @param int      &$listingMatchCount Counter to keep track of matched listings * * @return string/null $returnRecord The matched listing record for the given product or null if no match */function FindProductMatch($manufacturerKey, $productVal, $lookup, &$listingMatchCount){	$returnRecord = null;		$productVal = StripChars($productVal);	    // find the correct listings array in the lookup table	$tempArray = array_key_exists($manufacturerKey, $lookup) ? $lookup[$manufacturerKey] : null;		if($tempArray != null)	{    		for($i = 0; $i < sizeof($tempArray); $i++)		{					$listTitle = StripChars(strtolower($tempArray[$i]['title']));                   // try to find a match			if(stripos($listTitle, $productVal) !== false)			{				$returnRecord == null ? $returnRecord = $tempArray[$i] : array_push($returnRecord, $tempArray[$i]);                            // remove the matched listing record from the listings array				array_splice($lookup[$manufacturerKey], $i, 1);           				$listingMatchCount++;			}							}	}	return $returnRecord;}/** * Takes all listings and creates a hash/lookup table keyed on manufacturer name * * @param array $json The listings array * * @return array $lookup A newly created hash/lookup table of listings */function CreateLookupTable($json){	$lookup = array();	foreach($json as $obj)	{		$manufacturerKey = CleanKey($obj["manufacturer"]);			if(array_key_exists($manufacturerKey, $lookup))		{			array_push($lookup[$manufacturerKey],$obj);					}		else		{			$lookup[$manufacturerKey][] = $obj;		}	}		return $lookup;}/** * Reads in the contents of $filename and creates a json object array * * @param string $filename The fully qualified path to the file * * @return array $json json object array */function GetJsonFileContents($filename){	$json = array();	$file = fopen($filename,"r");    if($file === false)    {        throw new Exception("Could not open file $filename");    }  	while(! feof($file))	{	  $json[] = json_decode(fgets($file), true);	}	fclose($file);	return $json;}/** * Saves a record of a matching result to results.txt * * @param array $result The json result array of a given matching product to listings * * @return nothing */function SaveResults($result){	$result = json_encode($result);	$result = trim($result, "[],") . "\n";  	$success = file_put_contents(RESULTS_FILE, $result, FILE_APPEND);    if($success === false)    {        throw new Exception("failed to write to results.txt");    }}/** * Clears the contents of results.txt of any values it may have * * @param none * * @return nothing */function EmptyResultsFileContents(){    if(file_exists(RESULTS_FILE))    {        $file = @fopen(RESULTS_FILE, "r+");         if ($file !== false)        {            ftruncate($file, 0);            fclose($file);        }        else        {            throw new Exception("failed to clear contents of results.txt");        }    }}/** * Cleans up the manufacturer value of a product of assumed unnecessary values * * @param string $key The manufacturer key that will be used to match on the lookup array * * @return string $key The clean manufacturer key */function CleanKey($key){	$key = str_ireplace(" canada", "", $key);	$key = str_ireplace(" ca", "", $key);	$key = str_ireplace(" DSLR", "", $key);	$key = str_ireplace(" Alpha", "", $key);	$key = str_ireplace(" electronic imaging", "", $key);	$key = str_ireplace(" film usa", "", $key);	$key = str_ireplace(" america", "", $key);	$key = str_ireplace(" deutschland gmbh - consumer electronics", "", $key);	$key = str_ireplace(" optoelectronic gmbh", "", $key);	$key = str_ireplace(" deutschland gmbh", "", $key);	$key = str_ireplace(" europe gmbh", "", $key);	$key = str_ireplace(" germany gmbh", "", $key);	$key = str_ireplace(" deutschland", "", $key);	$key = str_ireplace(" international gmbh", "", $key);			$key = strtolower(trim($key));	return $key;}/** * Strips the string of unwanted characters that may hinder accutrate matching * * @param string $string A string that should be stripped of unwanted characters * * @return string $key The stripped string */function StripChars($string){	$string = str_ireplace(" /", ' ', $string);	$string = str_replace('-', ' ', $string);	$string = str_replace('_', ' ', $string);	$string = str_replace('\t', ' ', $string);	return $string;}?>